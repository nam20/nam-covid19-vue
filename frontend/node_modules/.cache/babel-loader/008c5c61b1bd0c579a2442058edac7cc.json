{"remainingRequest":"C:\\projects\\nam-lol\\frontend\\node_modules\\thread-loader\\dist\\cjs.js!C:\\projects\\nam-lol\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\projects\\nam-lol\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\projects\\nam-lol\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\projects\\nam-lol\\frontend\\src\\views\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\projects\\nam-lol\\frontend\\src\\views\\index.vue","mtime":1600777334105},{"path":"C:\\projects\\nam-lol\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\projects\\nam-lol\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\projects\\nam-lol\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\projects\\nam-lol\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\projects\\nam-lol\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICJDOi9wcm9qZWN0cy9uYW0tbG9sL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IFRvZGF5VG90YWwgZnJvbSAnQC9jb21wb25lbnRzL1RvZGF5VG90YWwnOwppbXBvcnQgQ292aWROZXdzIGZyb20gJ0AvY29tcG9uZW50cy9Db3ZpZE5ld3MnOwppbXBvcnQgS29yZWFEYWlseSBmcm9tICdAL2NvbXBvbmVudHMvS29yZWFEYWlseSc7CmltcG9ydCBDaXR5R2VuZGVyIGZyb20gJ0AvY29tcG9uZW50cy9DaXR5R2VuZGVyJzsKaW1wb3J0IEFnZVN0YXR1cyBmcm9tICdAL2NvbXBvbmVudHMvQWdlU3RhdHVzJzsKaW1wb3J0IEtvcmVhQ291bnRyeSBmcm9tICdAL2NvbXBvbmVudHMvS29yZWFDb3VudHJ5JzsKaW1wb3J0IFdvcmxkRGFpbHkgZnJvbSAnQC9jb21wb25lbnRzL1dvcmxkRGFpbHknOwppbXBvcnQgQ292aWRPdGhlciBmcm9tICdAL2NvbXBvbmVudHMvQ292aWRPdGhlcic7CmV4cG9ydCBkZWZhdWx0IHsKICBjb21wb25lbnRzOiB7CiAgICBUb2RheVRvdGFsOiBUb2RheVRvdGFsLAogICAgQ292aWROZXdzOiBDb3ZpZE5ld3MsCiAgICBLb3JlYURhaWx5OiBLb3JlYURhaWx5LAogICAgQ2l0eUdlbmRlcjogQ2l0eUdlbmRlciwKICAgIEFnZVN0YXR1czogQWdlU3RhdHVzLAogICAgS29yZWFDb3VudHJ5OiBLb3JlYUNvdW50cnksCiAgICBXb3JsZERhaWx5OiBXb3JsZERhaWx5LAogICAgQ292aWRPdGhlcjogQ292aWRPdGhlcgogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHdvcmxkVG90YWxEYXRhOiAnJywKICAgICAga29yZWFEYWlseVRvdGFsRGF0YTogJycsCiAgICAgIGtvcmVhQ2l0eURhdGE6ICcnLAogICAgICBrb3JlYUdlbkRhdGE6ICcnLAogICAgICBrb3JlYUFnZURhdGE6ICcnLAogICAgICBjb3VudHJ5VG90YWxEYXRhOiAnJwogICAgfTsKICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB0aGlzLmdldENvdW50cnlUb3RhbCgpOwogICAgdGhpcy5nZXRLb3JlYURhaWx5VG90YWwoKTsKICAgIHRoaXMuY292aWRHZW5BZ2UoKTsKICAgIHRoaXMuY292aWRDaXR5KCk7CiAgICBjb25zb2xlLmxvZygndGVzdCcpOwogIH0sCiAgbWV0aG9kczogewogICAgZ2V0Q291bnRyeVRvdGFsOiBmdW5jdGlvbiBnZXRDb3VudHJ5VG90YWwoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciBfeWllbGQkYXhpb3MkZ2V0LCBkYXRhOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldCgnL2NvdmlkL3dvcmxkJyk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIF95aWVsZCRheGlvcyRnZXQgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgZGF0YSA9IF95aWVsZCRheGlvcyRnZXQuZGF0YTsKICAgICAgICAgICAgICAgIGRhdGEgPSBkYXRhLm1hcChmdW5jdGlvbiAoY292aWQpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBjb25maXJtZWQ6IF90aGlzLnN0cmluZ0Zvcm1hdChjb3ZpZC5jb25maXJtZWQpLAogICAgICAgICAgICAgICAgICAgIHJlY292ZXJlZDogX3RoaXMuc3RyaW5nRm9ybWF0KGNvdmlkLnJlY292ZXJlZCksCiAgICAgICAgICAgICAgICAgICAgZGVhdGhzOiBfdGhpcy5zdHJpbmdGb3JtYXQoY292aWQuZGVhdGhzKSwKICAgICAgICAgICAgICAgICAgICBjb3VudHJ5OiBjb3ZpZC5jb3VudHJ5CiAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIF90aGlzLndvcmxkVG90YWxEYXRhID0gZGF0YS5zbGljZSgwLCAyKTsKICAgICAgICAgICAgICAgIF90aGlzLmNvdW50cnlUb3RhbERhdGEgPSBkYXRhLnNsaWNlKDIsIDIxNyk7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxMDsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMCk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKF9jb250ZXh0LnQwKTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbMCwgMTBdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIGdldEtvcmVhRGFpbHlUb3RhbDogZnVuY3Rpb24gZ2V0S29yZWFEYWlseVRvdGFsKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgIHZhciBfeWllbGQkYXhpb3MkZ2V0MiwgZGF0YTsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoJy9jb3ZpZC9rb3JlYS9kYXknKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgX3lpZWxkJGF4aW9zJGdldDIgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICAgIGRhdGEgPSBfeWllbGQkYXhpb3MkZ2V0Mi5kYXRhOwogICAgICAgICAgICAgICAgZGF0YSA9IGRhdGEucmVzcG9uc2UuYm9keS5pdGVtcy5pdGVtLnJldmVyc2UoKTsKICAgICAgICAgICAgICAgIGRhdGEuc3BsaWNlKDExNiwgMik7CiAgICAgICAgICAgICAgICBfdGhpczIua29yZWFEYWlseVRvdGFsRGF0YSA9IHsKICAgICAgICAgICAgICAgICAgZGF0ZXM6IGRhdGEubWFwKGZ1bmN0aW9uIChjb3ZpZCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBjb3ZpZC5jcmVhdGVEdC5zdWJzdHJpbmcoNSwgMTApOwogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgY29uZmlybWVkOiBkYXRhLm1hcChmdW5jdGlvbiAoY292aWQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gY292aWQuZGVjaWRlQ250OwogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgcmVjb3ZlcmVkOiBkYXRhLm1hcChmdW5jdGlvbiAoY292aWQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gY292aWQuY2xlYXJDbnQ7CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBkZWF0aHM6IGRhdGEubWFwKGZ1bmN0aW9uIChjb3ZpZCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBjb3ZpZC5kZWF0aENudDsKICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDEwOwogICAgICAgICAgICAgICAgX2NvbnRleHQyLnQwID0gX2NvbnRleHQyWyJjYXRjaCJdKDApOwogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihfY29udGV4dDIudDApOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyLCBudWxsLCBbWzAsIDEwXV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBjb3ZpZEdlbkFnZTogZnVuY3Rpb24gY292aWRHZW5BZ2UoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKSB7CiAgICAgICAgdmFyIF95aWVsZCRheGlvcyRnZXQzLCBkYXRhOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQzLnByZXYgPSAwOwogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldCgnL2NvdmlkL2tvcmVhL2dlbkFnZScpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBfeWllbGQkYXhpb3MkZ2V0MyA9IF9jb250ZXh0My5zZW50OwogICAgICAgICAgICAgICAgZGF0YSA9IF95aWVsZCRheGlvcyRnZXQzLmRhdGE7CiAgICAgICAgICAgICAgICBkYXRhID0gZGF0YS5yZXNwb25zZS5ib2R5Lml0ZW1zLml0ZW07CiAgICAgICAgICAgICAgICBfdGhpczMua29yZWFBZ2VEYXRhID0gZGF0YS5zbGljZSgwLCA5KTsKICAgICAgICAgICAgICAgIF90aGlzMy5rb3JlYUdlbkRhdGEgPSBkYXRhLnNsaWNlKDksIDExKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gMTA7CiAgICAgICAgICAgICAgICBfY29udGV4dDMudDAgPSBfY29udGV4dDNbImNhdGNoIl0oMCk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKF9jb250ZXh0My50MCk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMsIG51bGwsIFtbMCwgMTBdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIGNvdmlkQ2l0eTogZnVuY3Rpb24gY292aWRDaXR5KCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KCkgewogICAgICAgIHZhciByZXMsIGNpdHlEYXRhLCBjaXR5TmFtZXM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5wcmV2ID0gMDsKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoJy9jb3ZpZC9rb3JlYS9jaXR5Jyk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0NC5zZW50OwogICAgICAgICAgICAgICAgY2l0eURhdGEgPSByZXMuZGF0YS5yZXNwb25zZS5ib2R5Lml0ZW1zLml0ZW0uc2xpY2UoMCwgMTgpOwogICAgICAgICAgICAgICAgY2l0eU5hbWVzID0gY2l0eURhdGEubWFwKGZ1bmN0aW9uIChjaXR5KSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBjaXR5Lmd1YnVuOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBfdGhpczQua29yZWFDaXR5RGF0YSA9IHsKICAgICAgICAgICAgICAgICAgY2l0eURhdGE6IGNpdHlEYXRhLAogICAgICAgICAgICAgICAgICBjaXR5TmFtZXM6IGNpdHlOYW1lcwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgX2NvbnRleHQ0LnByZXYgPSA5OwogICAgICAgICAgICAgICAgX2NvbnRleHQ0LnQwID0gX2NvbnRleHQ0WyJjYXRjaCJdKDApOwogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihfY29udGV4dDQudDApOwoKICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU0LCBudWxsLCBbWzAsIDldXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIHN0cmluZ0Zvcm1hdDogZnVuY3Rpb24gc3RyaW5nRm9ybWF0KGlucHV0KSB7CiAgICAgIHJldHVybiBpbnB1dCAmJiBpbnB1dCAhPSAiTi9BIiA/IHBhcnNlSW50KGlucHV0LnJlcGxhY2VBbGwoLywvZywgJycpLCAxMCkgOiAwOwogICAgfQogIH0KfTs="},{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n       <v-container fluid  style=\"background-color: #f7f9fc\" class=\"px-5\"> \r\n            \r\n            <today-total \r\n            :koreaTotalData=\"koreaDailyTotalData\" \r\n            :worldTotalData=\"worldTotalData\">\r\n            </today-total>\r\n          \r\n            <korea-daily\r\n            :dailyTotalData=\"koreaDailyTotalData\"\r\n            :cityData=\"koreaCityData\">\r\n            </korea-daily>\r\n        \r\n            <covid-news>\r\n            </covid-news>\r\n      \r\n            <city-gender\r\n            :cityData=\"koreaCityData\"\r\n            :genderData=\"koreaGenData\">\r\n            </city-gender>\r\n\r\n            <age-status\r\n            :ageData=\"koreaAgeData\">\r\n            </age-status>\r\n\r\n            <korea-country\r\n            :koreaNewConfData=\"koreaDailyTotalData\"\r\n            :worldCountryData=\"countryTotalData\">\r\n            </korea-country>\r\n\r\n            <world-daily\r\n            :countryData=\"countryTotalData\">\r\n            </world-daily>\r\n\r\n            <covid-other\r\n            :koreaTotalData=\"koreaDailyTotalData\" \r\n            :worldTotalData=\"worldTotalData\">\r\n            </covid-other>\r\n            \r\n        </v-container>        \r\n</template>\r\n\r\n<script>\r\nimport TodayTotal from '@/components/TodayTotal'\r\nimport CovidNews from '@/components/CovidNews'\r\nimport KoreaDaily from '@/components/KoreaDaily'\r\nimport CityGender from '@/components/CityGender'\r\nimport AgeStatus from '@/components/AgeStatus'\r\nimport KoreaCountry from '@/components/KoreaCountry'\r\nimport WorldDaily from '@/components/WorldDaily'\r\nimport CovidOther from '@/components/CovidOther'\r\n\r\nexport default {\r\n    components:{\r\n        TodayTotal,\r\n        CovidNews,\r\n        KoreaDaily,\r\n        CityGender,\r\n        AgeStatus,\r\n        KoreaCountry,\r\n        WorldDaily,\r\n        CovidOther\r\n    },\r\n    data(){\r\n        return {\r\n            worldTotalData : '',\r\n            koreaDailyTotalData:'',\r\n            koreaCityData:'',\r\n            koreaGenData:'',\r\n            koreaAgeData:'',\r\n            countryTotalData:'',\r\n        }\r\n    },\r\n    created(){\r\n        this.getCountryTotal()\r\n        this.getKoreaDailyTotal()\r\n        this.covidGenAge();\r\n        this.covidCity();\r\n        console.log('test')\r\n    },\r\n    methods:{\r\n       \r\n        async getCountryTotal(){\r\n            try{\r\n                let { data } = await axios.get('/covid/world')\r\n                \r\n                data = data.map(covid => {\r\n                    return {\r\n                        confirmed : this.stringFormat(covid.confirmed),\r\n                        recovered : this.stringFormat(covid.recovered),\r\n                        deaths : this.stringFormat(covid.deaths),\r\n                        country : covid.country\r\n                    }\r\n                })\r\n                \r\n                this.worldTotalData = data.slice(0,2)\r\n                this.countryTotalData = data.slice(2,217)\r\n\r\n            }catch(e){\r\n                console.error(e)\r\n            }\r\n        },\r\n        async getKoreaDailyTotal(){\r\n            try{\r\n                let { data } = await axios.get('/covid/korea/day')\r\n                data = data.response.body.items.item.reverse()\r\n                data.splice(116, 2)\r\n                \r\n                this.koreaDailyTotalData = {\r\n                    dates : data.map(covid => covid.createDt.substring(5,10)), \r\n                    confirmed : data.map(covid => covid.decideCnt),\r\n                    recovered : data.map(covid => covid.clearCnt),\r\n                    deaths : data.map(covid => covid.deathCnt)\r\n                }\r\n\r\n            }catch(e){\r\n                console.error(e)\r\n            }\r\n        },\r\n       \r\n        async covidGenAge(){\r\n            try{\r\n                let { data } = await axios.get('/covid/korea/genAge')\r\n                data = data.response.body.items.item\r\n                \r\n                this.koreaAgeData = data.slice(0, 9)\r\n                this.koreaGenData = data.slice(9, 11)\r\n\r\n            }catch(e){\r\n                console.error(e)\r\n            }\r\n        },\r\n        async covidCity(){\r\n            try{\r\n                const res = await axios.get('/covid/korea/city')\r\n                const cityData = res.data.response.body.items.item.slice(0, 18)\r\n                const cityNames = cityData.map(city => city.gubun)\r\n\r\n                this.koreaCityData = {\r\n                    cityData, \r\n                    cityNames\r\n                }\r\n            }catch(e){\r\n                console.error(e)\r\n            }\r\n        },\r\n        stringFormat(input){\r\n            return input && input != \"N/A\" ? parseInt(input.replaceAll(/,/g, ''), 10) : 0\r\n        },\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n</style>\r\n"],"sourceRoot":"src/views"}]}