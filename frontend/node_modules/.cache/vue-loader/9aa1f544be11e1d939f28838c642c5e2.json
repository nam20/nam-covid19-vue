{"remainingRequest":"C:\\projects\\nam-lol\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\projects\\nam-lol\\frontend\\src\\views\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\projects\\nam-lol\\frontend\\src\\views\\index.vue","mtime":1598880458992},{"path":"C:\\projects\\nam-lol\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\projects\\nam-lol\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\projects\\nam-lol\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4JA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA","file":"index.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n    \r\n        <v-container fluid > \r\n            <!-- <v-btn color=\"success\" @click=\"$router.push('/home')\">home</v-btn>\r\n            <v-btn color=\"#2196F3\" @click=\"$router.push('/signup')\">회원가입</v-btn>\r\n            <v-btn color=\"warning\" @click=\"$router.push('/login')\">로그인</v-btn>\r\n            <v-btn @click=\"$router.push('/nav')\">테스트</v-btn>\r\n            <v-btn @click=\"$router.push('/postForm')\">에디터</v-btn>\r\n            <v-btn @click=\"$router.push('/postList')\">게시판</v-btn> -->\r\n            <v-btn @click=\"$router.push('/chartjs')\">뷰차트 테스트</v-btn>\r\n            <v-row>\r\n                <v-col>\r\n\r\n                    <v-card>\r\n                        <v-card-title>\r\n                            <h2><span class=\"title mb-1\">국내</span></h2>\r\n                        </v-card-title>\r\n                        \r\n                        <v-list-item  >\r\n                            \r\n                            <v-list-item-content class=\"justify-center\">\r\n                                <v-card-title >확진</v-card-title>\r\n                                <v-card-text><h2>{{koreaTotal.TotalConfirmed}}</h2></v-card-text>\r\n                            </v-list-item-content >\r\n                            <v-list-item-content class=\"justify-center\">\r\n                                <v-card-title >완치</v-card-title>\r\n                                <v-card-text><h2>{{koreaTotal.TotalRecovered}}</h2></v-card-text>\r\n                                \r\n                            </v-list-item-content >\r\n                            <v-list-item-content class=\"justify-center\">\r\n                                <v-card-title >사망</v-card-title>\r\n                                <v-card-text><h2>{{koreaTotal.TotalDeaths}}</h2></v-card-text>\r\n                                \r\n                            </v-list-item-content >\r\n                        </v-list-item>\r\n                    </v-card>\r\n                </v-col>\r\n                <v-col >\r\n                    <v-card>\r\n                        <v-card-title>\r\n                            <h2><span class=\"title mb-1\">해외</span></h2>\r\n                        </v-card-title>\r\n                        <v-list-item >\r\n                            \r\n                            <v-list-item-content class=\"justify-center\">\r\n                                <v-card-title >확진</v-card-title>\r\n                                <v-card-text><h2>{{worldTotal.TotalConfirmed}}</h2></v-card-text>\r\n                            </v-list-item-content >\r\n                            <v-list-item-content class=\"justify-center\">\r\n                                <v-card-title >완치</v-card-title>\r\n                                <v-card-text><h2>{{worldTotal.TotalRecovered}}</h2></v-card-text>\r\n                                \r\n                            </v-list-item-content >\r\n                            <v-list-item-content class=\"justify-center\">\r\n                                <v-card-title >사망</v-card-title>\r\n                                <v-card-text><h2>{{worldTotal.TotalDeaths}}</h2></v-card-text>\r\n                                \r\n                            </v-list-item-content >\r\n                        </v-list-item>\r\n                    </v-card>\r\n                </v-col>\r\n            </v-row>\r\n            <v-row>\r\n                <v-col >\r\n                    <v-card>\r\n                        <h3>국내 확진자수 증가추이</h3>\r\n                        <v-switch label=\"test\"></v-switch>\r\n                        <line-chart \r\n                        v-if=\"loaded\"\r\n                        :chart-data=\"koreaChartData\">\r\n                        </line-chart>\r\n                    </v-card>\r\n                </v-col>\r\n                <v-col>\r\n                    <v-card>\r\n                        <h3>국내 확진자 일일 신규</h3>\r\n                        <v-switch label=\"test\"></v-switch>\r\n                        <line-chart \r\n                        v-if=\"loaded\"\r\n                        :chart-data=\"koreaDailyChartData\">\r\n                        </line-chart>\r\n                    </v-card>\r\n                </v-col>\r\n            </v-row>\r\n            \r\n            <v-row>\r\n                <v-col cols=\"12\" xs=\"12\" md=\"6\" >\r\n                    <v-card>\r\n                        <v-card-title>\r\n                            <h2><span class=\"title mb-4\">국내 주요 뉴우스</span></h2>\r\n                        </v-card-title>\r\n                        <v-card-text v-for=\"news in naverNews\" :key=\"news\">\r\n                            <h4>\r\n                                <a :href=\"news.href\" style=\"text-decoration:none; color:#2d46c4\" target=\"_blank\">{{news.title}}</a>\r\n                            </h4>\r\n                        </v-card-text>\r\n                        \r\n                    </v-card>\r\n                </v-col>\r\n\r\n                <v-col cols=\"12\" xs=\"12\" md=\"6\" >\r\n                    <v-card>\r\n                        <v-card-title>\r\n                            <h2><span class=\"title mb-4\">해외 주요 뉴우스</span></h2>\r\n                        </v-card-title>\r\n                        <v-card-text v-for=\"news in googleNews\" :key=\"news\">\r\n                            <h4>\r\n                                <a :href=\"news.href\" style=\"text-decoration:none; color:#2d46c4\" target=\"_blank\">{{news.title}}</a>\r\n                            </h4>\r\n                        </v-card-text>\r\n                        \r\n                    </v-card>\r\n                </v-col>\r\n            </v-row>\r\n            <v-row>\r\n                <v-col>\r\n                    <v-card>\r\n                        <h3>연령대별 확진자 현황</h3>\r\n                        <bar-chart\r\n                        :chart-data=\"koreaAgeChartData\"\r\n                        v-if=\"genAgeChartLoaded\">\r\n                        </bar-chart>\r\n                    </v-card>\r\n                    <v-card>\r\n                        <h3>연령대별 치명율 현황</h3>\r\n                        <bar-chart\r\n                        :chart-data=\"koreaCriticalChartData\"\r\n                        v-if=\"genAgeChartLoaded\">\r\n                        </bar-chart>\r\n                    </v-card>\r\n                </v-col>\r\n            </v-row>\r\n            \r\n            <v-row>\r\n                <v-col>\r\n                    <v-card>\r\n                        <h3>성별 확진자 현황</h3>\r\n                        <bar-chart\r\n                        :chart-data=\"koreaGenChartData\"\r\n                        v-if=\"genAgeChartLoaded\">\r\n                        </bar-chart>\r\n                    </v-card>\r\n                    <v-card>\r\n                        <h3>도시별 확진자 현황</h3>\r\n                        <bar-chart\r\n                        :chart-data=\"koreaCityChartData\"\r\n                        v-if=\"cityChartLoaded\">\r\n                        </bar-chart>\r\n                    </v-card>\r\n                </v-col>\r\n            </v-row>\r\n        </v-container>\r\n        \r\n</template>\r\n\r\n<script>\r\nimport LineChart from '@/components/LineChart'\r\nimport BarChart from '@/components/BarChart'\r\n\r\nexport default {\r\n    components:{\r\n        LineChart,\r\n        BarChart,\r\n    },\r\n    data(){\r\n        return {\r\n            worldTotal:{},\r\n            koreaTotal:{},\r\n            koreaTotalChartData: null,\r\n            koreaDailyChartData:null,\r\n            koreaGenChartData:null,\r\n            koreaAgeChartData:null,\r\n            koreaCriticalChartData:null,\r\n            koreaCityChartData:null,\r\n            loaded:false,\r\n            naverNews:'',\r\n            googleNews:'',\r\n            genAgeChartLoaded:false,\r\n            cityChartLoaded:false,\r\n\r\n            \r\n        }\r\n    },\r\n    created(){\r\n        this.getWorldTotal()\r\n        this.corona()\r\n        this.googleCrawling()\r\n        \r\n        this.naverCrawling()\r\n        this.covidGenAge();\r\n        this.covidCity();\r\n    },\r\n    methods:{\r\n        getWorldTotal(){\r\n            axios.get('https://api.covid19api.com/world/total')\r\n            .then(({data})=>{\r\n                this.worldTotal = {\r\n                    TotalConfirmed : this.numberFormat(data.TotalConfirmed),\r\n                    TotalDeaths : this.numberFormat(data.TotalDeaths),\r\n                    TotalRecovered : this.numberFormat(data.TotalRecovered)\r\n                }\r\n            })\r\n            .catch(err=>{\r\n                console.error(err)\r\n            })\r\n        },\r\n        async corona(){\r\n            try{\r\n                let { data } = await axios.get('https://api.covid19api.com/total/country/south-korea')\r\n                console.log(data)\r\n                let dates = data.map(covid => covid.Date.substring(5,10))\r\n                let confirmed = data.map(covid => covid.Confirmed)\r\n                let recovered = data.map(covid => covid.Recovered)\r\n                let deaths = data.map(covid => covid.Deaths)\r\n                this.koreaChartData = {\r\n                    labels: dates,\r\n                    datasets:[\r\n                        {\r\n                            label: 'Confirmed',\r\n                            borderColor:'#03fcec',\r\n                            backgroundColor:'rgba(3, 252, 236, 0.2)',\r\n                            pointBorderColor:'rgba(255, 255, 255, 0)',\r\n                            borderWidth: 2,\r\n                            data: confirmed\r\n                        },\r\n                        {\r\n                            label: 'Recovered',\r\n                            borderColor:'#0ecf4b',                     \r\n                            backgroundColor:'rgba(14, 207, 75, 0.2)',\r\n                            pointBorderColor:'rgba(255, 255, 255, 0)',\r\n                            borderWidth: 2,\r\n                            data: recovered\r\n                        },\r\n                        \r\n                        {\r\n                            label: 'Deaths',\r\n                            borderColor:'#c70808',\r\n                            backgroundColor:'rgba(199, 8, 8, 0.7)',\r\n                            pointBorderColor:'rgba(255, 255, 255, 0)',\r\n                            borderWidth: 2,\r\n                            data: deaths\r\n                        },\r\n                        \r\n                    ]\r\n                }\r\n                \r\n                let dailyConfirmed = confirmed.slice(confirmed.length - 31)\r\n                let dailyDates = dates.slice(dates.length - 30)\r\n                \r\n                for(let i=0; i<30; i++){\r\n                    dailyConfirmed[i] = dailyConfirmed[i+1] - dailyConfirmed[i]\r\n                }\r\n                console.log(dailyConfirmed)\r\n                this.koreaDailyChartData = {\r\n                    labels: dailyDates,\r\n                    datasets:[\r\n                        {\r\n                            label: 'Confirmed',\r\n                            borderColor:'#03fcec',\r\n                            backgroundColor:'rgba(3, 252, 236, 0.2)',\r\n                            pointBorderColor:'rgba(255, 255, 255, 0)',\r\n                            borderWidth: 2,\r\n                            data: dailyConfirmed.slice(0,dailyConfirmed.length-1)\r\n                        }\r\n                    ]\r\n                }\r\n\r\n                this.koreaTotal = {\r\n                    TotalConfirmed : this.numberFormat(confirmed[confirmed.length-1]),\r\n                    TotalDeaths : this.numberFormat(deaths[deaths.length-1]),\r\n                    TotalRecovered : this.numberFormat(recovered[recovered.length-1])\r\n                }\r\n                this.loaded = true\r\n            }catch(e){\r\n                console.error(e)\r\n            }\r\n        },\r\n        async naverCrawling(){\r\n            try{\r\n                let { data } = await axios.get('/covid/naverCrawling')\r\n                this.naverNews = data\r\n            }catch(e){\r\n                console.error(e)\r\n            }\r\n        },\r\n        async googleCrawling(){\r\n            try{\r\n                let { data } = await axios.get('/covid/googleCrawling')\r\n                this.googleNews = data\r\n            }catch(e){\r\n                console.error(e)\r\n            }\r\n        },\r\n        async covidGenAge(){\r\n            try{\r\n                let res = await axios.get('/covid/case',{\r\n                    params: {\r\n                        serviceCase : 'genAge'\r\n                    }\r\n                })\r\n                console.log(res)\r\n                let data = res.data.response.body.items.item\r\n                let ageData = data.slice(0, 9)\r\n                let genData = data.slice(9, 11)\r\n                \r\n                let age = ageData.map(genAge => genAge.gubun)\r\n               \r\n                this.koreaAgeChartData = {\r\n                    labels : age,\r\n                    datasets:[\r\n                        {\r\n                            label: '확진자',\r\n                            borderColor:'#03fcec',\r\n                            backgroundColor:'rgba(3, 252, 236, 0.2)',\r\n                            pointBorderColor:'rgba(255, 255, 255, 0)',\r\n                            borderWidth: 2,\r\n                            data: ageData.map(genAge => genAge.confCase)\r\n                        },\r\n                        \r\n                    ]\r\n                }\r\n\r\n                this.koreaCriticalChartData = {\r\n                    labels : age,\r\n                    datasets:[\r\n                        {\r\n                            label: '치명율 (사망자/확진자)',\r\n                            borderColor:'#03fcec',\r\n                            backgroundColor:'rgba(3, 252, 236, 0.2)',\r\n                            pointBorderColor:'rgba(255, 255, 255, 0)',\r\n                            borderWidth: 2,\r\n                            data: ageData.map(genAge => genAge.criticalRate)\r\n                        },\r\n                        \r\n                    ]\r\n                }\r\n\r\n                this.koreaGenChartData = {\r\n                    labels : genData.map(genAge => genAge.gubun),\r\n                    datasets: [\r\n                        {\r\n                            label: '확진자',\r\n                            borderColor:'#03fcec',\r\n                            backgroundColor:'rgba(3, 252, 236, 0.2)',\r\n                            pointBorderColor:'rgba(255, 255, 255, 0)',\r\n                            borderWidth: 2,\r\n                            data: genData.map(genAge => genAge.confCase)\r\n                        },\r\n                    ]\r\n                }\r\n                this.genAgeChartLoaded = true\r\n                console.log(age)\r\n            }catch(e){\r\n                console.error(e)\r\n            }\r\n        },\r\n        async covidCity(){\r\n            try{\r\n                let res = await axios.get('/covid/case',{\r\n                    params:{\r\n                        serviceCase : 'city'\r\n                    }\r\n                })\r\n                let cityData = res.data.response.body.items.item.slice(0, 18)\r\n                console.log(cityData)\r\n                this.koreaCityChartData = {\r\n                    labels: cityData.map(city => city.gubun),\r\n                    datasets:[\r\n                        {\r\n                            label: '확진자',\r\n                            borderColor:'#03fcec',\r\n                            backgroundColor:'rgba(3, 252, 236, 0.2)',\r\n                            pointBorderColor:'rgba(255, 255, 255, 0)',\r\n                            borderWidth: 2,\r\n                            data: cityData.map(city => city.defCnt)\r\n                        }\r\n                    ]\r\n                }\r\n                this.cityChartLoaded = true\r\n\r\n            }catch(e){\r\n                console.error(e)\r\n            }\r\n        },\r\n        numberFormat(input){\r\n            return input.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n        },\r\n        \r\n            \r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"]}]}