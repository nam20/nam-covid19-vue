{"remainingRequest":"C:\\projects\\nam-lol\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\projects\\nam-lol\\frontend\\src\\views\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\projects\\nam-lol\\frontend\\src\\views\\index.vue","mtime":1599136002571},{"path":"C:\\projects\\nam-lol\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\projects\\nam-lol\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\projects\\nam-lol\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgTGluZUNoYXJ0IGZyb20gJ0AvY29tcG9uZW50cy9MaW5lQ2hhcnQnDQppbXBvcnQgQmFyQ2hhcnQgZnJvbSAnQC9jb21wb25lbnRzL0JhckNoYXJ0Jw0KaW1wb3J0IHsgR0NoYXJ0IH0gZnJvbSAndnVlLWdvb2dsZS1jaGFydHMnDQoNCg0KZXhwb3J0IGRlZmF1bHQgew0KICAgIGNvbXBvbmVudHM6ew0KICAgICAgICBMaW5lQ2hhcnQsDQogICAgICAgIEJhckNoYXJ0LA0KICAgICAgICBHQ2hhcnQsDQogICAgfSwNCiAgICBkYXRhKCl7DQogICAgICAgIHJldHVybiB7DQogICAgICAgICAgICB3b3JsZFRvdGFsOnt9LA0KICAgICAgICAgICAga29yZWFUb3RhbDp7fSwNCiAgICAgICAgICAgIGtvcmVhVG90YWxDaGFydERhdGE6IG51bGwsDQogICAgICAgICAgICBrb3JlYURhaWx5Q2hhcnREYXRhOm51bGwsDQogICAgICAgICAgICBrb3JlYUdlbkNoYXJ0RGF0YTpudWxsLA0KICAgICAgICAgICAga29yZWFBZ2VDaGFydERhdGE6bnVsbCwNCiAgICAgICAgICAgIGtvcmVhQ3JpdGljYWxDaGFydERhdGE6bnVsbCwNCiAgICAgICAgICAgIGtvcmVhQ2l0eUNoYXJ0RGF0YTpudWxsLA0KICAgICAgICAgICAgd29ybGRDaGFydERhdGE6bnVsbCwNCiAgICAgICAgICAgIGxvYWRlZDpmYWxzZSwNCiAgICAgICAgICAgIG5hdmVyTmV3czonJywNCiAgICAgICAgICAgIGdvb2dsZU5ld3M6JycsDQogICAgICAgICAgICBnZW5BZ2VDaGFydExvYWRlZDpmYWxzZSwNCiAgICAgICAgICAgIGNpdHlDaGFydExvYWRlZDpmYWxzZSwNCiAgICAgICAgICAgIHdvcmxkQ2hhcnRMb2FkZWQ6ZmFsc2UsDQogICAgICAgICAgICBrb3JlYUdlb0NoYXJ0TG9hZGVkOmZhbHNlLA0KDQogICAgICAgICAgICBrb3JlYUdlb0NoYXJ0RGF0YTogWw0KICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgWydDaXR5JywgJ+2ZleynhCddLA0KICAgICAgICAgICAgICAgIFt7djonS1ItNDknLGY6J+ygnOyjvCd9XSwNCiAgICAgICAgICAgICAgICBbe3Y6J0tSLTQ4JyxmOifqsr3rgqgnfV0sDQogICAgICAgICAgICAgICAgW3t2OidLUi00NycsZjon6rK967aBJ31dLA0KICAgICAgICAgICAgICAgIFt7djonS1ItNDYnLGY6J+yghOuCqCd9XSwNCiAgICAgICAgICAgICAgICBbe3Y6J0tSLTQ1JyxmOifsoITrtoEnfV0sDQogICAgICAgICAgICAgICAgW3t2OidLUi00NCcsZjon7Lap64KoJ31dLA0KICAgICAgICAgICAgICAgIFt7djonS1ItNDMnLGY6J+y2qeu2gSd9XSwNCiAgICAgICAgICAgICAgICBbe3Y6J0tSLTQyJyxmOifqsJXsm5AnfV0sDQogICAgICAgICAgICAgICAgW3t2OidLUi00MScsZjon6rK96riwJ31dLA0KICAgICAgICAgICAgICAgIFt7djonS1ItNTAnLGY6J+yEuOyihSd9XSwNCiAgICAgICAgICAgICAgICBbe3Y6J0tSLTMxJyxmOifsmrjsgrAnfV0sDQogICAgICAgICAgICAgICAgW3t2OidLUi0zMCcsZjon64yA7KCEJ31dLA0KICAgICAgICAgICAgICAgIFt7djonS1ItMjknLGY6J+q0keyjvCd9XSwNCiAgICAgICAgICAgICAgICBbe3Y6J0tSLTI4JyxmOifsnbjsspwnfV0sDQogICAgICAgICAgICAgICAgW3t2OidLUi0yNycsZjon64yA6rWsJ31dLA0KICAgICAgICAgICAgICAgIFt7djonS1ItMjYnLGY6J+u2gOyCsCd9XSwNCiAgICAgICAgICAgICAgICBbe3Y6J0tSLTExJyxmOifshJzsmrgnfV0sDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICBdLA0KICAgICAgICAgICAga29yZWFHZW9DaGFydE9wdGlvbnM6IHsNCiAgICAgICAgICAgICAgICByZWdpb246ICdLUicsDQogICAgICAgICAgICAgICAgcmVzb2x1dGlvbjogJ3Byb3ZpbmNlcycsDQogICAgICAgICAgICAgICAgY29sb3JBeGlzOnsNCiAgICAgICAgICAgICAgICAgICAgbWluVmFsdWU6IDAsICBjb2xvcnM6IFsnI2ZmZmZmZicsICcjZjAwYTBhJ10NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9LA0KDQogICAgICAgICAgICB3b3JsZEdlb0NoYXJ0RGF0YTpbWydDb3VudHJ5JywgJ+2ZleynhCddXSwNCg0KDQogICAgICAgICAgICB3b3JsZEdlb0NoYXJ0T3B0aW9uczp7DQogICAgICAgICAgICAgICAgcmVzb2x1dGlvbjogJ2NvdW50cmllcycsDQogICAgICAgICAgICAgICAgY29sb3JBeGlzOnsNCiAgICAgICAgICAgICAgICAgICAgbWluVmFsdWU6IDAsICBjb2xvcnM6IFsnI2ZmZmZmZicsICcjZjAwYTBhJ10NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgc2xpZGVzOlsNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHNyYzogJ2ltYWdlcy9jb3JvbmEtMS5qcGcnDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHNyYzogJ2ltYWdlcy9jb3JvbmEtMi5qcGcnDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHNyYzogJ2ltYWdlcy9jb3JvbmEtMy5qcGcnDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHNyYzogJ2ltYWdlcy9jb3JvbmEtNC5qcGcnDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIF0NCg0KICAgICAgICAgICAgDQogICAgICAgIH0NCiAgICB9LA0KICAgIGNyZWF0ZWQoKXsNCiAgICAgICAgdGhpcy5nZXRXb3JsZFRvdGFsKCkNCiAgICAgICAgdGhpcy5nZXRLb3JlYVRvdGFsKCkNCiAgICAgICAgdGhpcy5nb29nbGVDcmF3bGluZygpDQogICAgICAgIA0KICAgICAgICB0aGlzLm5hdmVyQ3Jhd2xpbmcoKQ0KICAgICAgICB0aGlzLmNvdmlkR2VuQWdlKCk7DQogICAgICAgIHRoaXMuY292aWRDaXR5KCk7DQoNCiAgICAgICAgdGhpcy5nZXRDb3VudHJ5VG90YWwoKQ0KICAgICAgIA0KICAgIH0sDQogICAgbWV0aG9kczp7DQogICAgICAgIC8vIGdldFdvcmxkVG90YWwoKXsNCiAgICAgICAgLy8gICAgIGF4aW9zLmdldCgnaHR0cHM6Ly9hcGkuY292aWQxOWFwaS5jb20vd29ybGQvdG90YWwnKQ0KICAgICAgICAvLyAgICAgLnRoZW4oKHtkYXRhfSk9PnsNCiAgICAgICAgLy8gICAgICAgICB0aGlzLndvcmxkVG90YWwgPSB7DQogICAgICAgIC8vICAgICAgICAgICAgIFRvdGFsQ29uZmlybWVkIDogdGhpcy5udW1iZXJGb3JtYXQoZGF0YS5Ub3RhbENvbmZpcm1lZCksDQogICAgICAgIC8vICAgICAgICAgICAgIFRvdGFsRGVhdGhzIDogdGhpcy5udW1iZXJGb3JtYXQoZGF0YS5Ub3RhbERlYXRocyksDQogICAgICAgIC8vICAgICAgICAgICAgIFRvdGFsUmVjb3ZlcmVkIDogdGhpcy5udW1iZXJGb3JtYXQoZGF0YS5Ub3RhbFJlY292ZXJlZCkNCiAgICAgICAgLy8gICAgICAgICB9DQogICAgICAgIC8vICAgICB9KQ0KICAgICAgICAvLyAgICAgLmNhdGNoKGVycj0+ew0KICAgICAgICAvLyAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKQ0KICAgICAgICAvLyAgICAgfSkNCiAgICAgICAgLy8gfSwNCiAgICAgICAgYXN5bmMgZ2V0V29ybGRUb3RhbCgpew0KICAgICAgICAgICAgdHJ5ew0KICAgICAgICAgICAgICAgIGxldCB7IGRhdGEgfSA9IGF3YWl0IGF4aW9zLmdldCgnL2NvdmlkL3dvcmxkL2RhaWx5JykNCiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKQ0KICAgICAgICAgICAgICAgIHRoaXMud29ybGRDaGFydERhdGEgID0gew0KICAgICAgICAgICAgICAgICAgICBsYWJlbHMgOiBkYXRhLm1hcChjb3ZpZCA9PiBjb3ZpZC5yZXBvcnREYXRlLnN1YnN0cmluZyg1KSksDQogICAgICAgICAgICAgICAgICAgIGRhdGFzZXRzOlsNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0NvbmZpcm1lZCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6JyMwM2ZjZWMnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjoncmdiYSgzLCAyNTIsIDIzNiwgMC4yKScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRCb3JkZXJDb2xvcjoncmdiYSgyNTUsIDI1NSwgMjU1LCAwKScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZGF0YS5tYXAoY292aWQgPT4gY292aWQuY29uZmlybWVkLnRvdGFsKQ0KICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0RlYXRocycsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6JyNjNzA4MDgnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjoncmdiYSgxOTksIDgsIDgsIDAuNyknLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50Qm9yZGVyQ29sb3I6J3JnYmEoMjU1LCAyNTUsIDI1NSwgMCknLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAyLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEubWFwKGNvdmlkID0+IGNvdmlkLmRlYXRocy50b3RhbCkNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgXQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB0aGlzLndvcmxkQ2hhcnRMb2FkZWQgPSB0cnVlDQogICAgICAgICAgICB9Y2F0Y2goZSl7DQogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9LA0KICAgICAgICBhc3luYyBnZXRDb3VudHJ5VG90YWwoKXsNCiAgICAgICAgICAgIHRyeXsNCiAgICAgICAgICAgICAgICBsZXQgeyBkYXRhIH0gPSBhd2FpdCBheGlvcy5nZXQoJy9jb3ZpZC93b3JsZC9jb25maXJtZWQnKQ0KICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpDQogICAgICAgICAgICAgICAgZGF0YS5mb3JFYWNoKGNvdmlkID0+IHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy53b3JsZEdlb0NoYXJ0RGF0YS5wdXNoKFtjb3ZpZC5jb3VudHJ5UmVnaW9uLCBjb3ZpZC5jb25maXJtZWRdKQ0KICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICB9Y2F0Y2goZSl7DQogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9LA0KICAgICAgICBhc3luYyBnZXRLb3JlYVRvdGFsKCl7DQogICAgICAgICAgICB0cnl7DQogICAgICAgICAgICAgICAgbGV0IHsgZGF0YSB9ID0gYXdhaXQgYXhpb3MuZ2V0KCdodHRwczovL2FwaS5jb3ZpZDE5YXBpLmNvbS90b3RhbC9jb3VudHJ5L3NvdXRoLWtvcmVhJykNCiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKQ0KICAgICAgICAgICAgICAgIGxldCBkYXRlcyA9IGRhdGEubWFwKGNvdmlkID0+IGNvdmlkLkRhdGUuc3Vic3RyaW5nKDUsMTApKQ0KICAgICAgICAgICAgICAgIGxldCBjb25maXJtZWQgPSBkYXRhLm1hcChjb3ZpZCA9PiBjb3ZpZC5Db25maXJtZWQpDQogICAgICAgICAgICAgICAgbGV0IHJlY292ZXJlZCA9IGRhdGEubWFwKGNvdmlkID0+IGNvdmlkLlJlY292ZXJlZCkNCiAgICAgICAgICAgICAgICBsZXQgZGVhdGhzID0gZGF0YS5tYXAoY292aWQgPT4gY292aWQuRGVhdGhzKQ0KICAgICAgICAgICAgICAgIHRoaXMua29yZWFDaGFydERhdGEgPSB7DQogICAgICAgICAgICAgICAgICAgIGxhYmVsczogZGF0ZXMsDQogICAgICAgICAgICAgICAgICAgIGRhdGFzZXRzOlsNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0NvbmZpcm1lZCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6JyMwM2ZjZWMnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjoncmdiYSgzLCAyNTIsIDIzNiwgMC4yKScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRCb3JkZXJDb2xvcjoncmdiYSgyNTUsIDI1NSwgMjU1LCAwKScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogY29uZmlybWVkDQogICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnUmVjb3ZlcmVkJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjonIzBlY2Y0YicsICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOidyZ2JhKDE0LCAyMDcsIDc1LCAwLjIpJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludEJvcmRlckNvbG9yOidyZ2JhKDI1NSwgMjU1LCAyNTUsIDApJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJXaWR0aDogMiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiByZWNvdmVyZWQNCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0RlYXRocycsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6JyNjNzA4MDgnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjoncmdiYSgxOTksIDgsIDgsIDAuNyknLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50Qm9yZGVyQ29sb3I6J3JnYmEoMjU1LCAyNTUsIDI1NSwgMCknLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAyLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGRlYXRocw0KICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBdDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGxldCBkYWlseUNvbmZpcm1lZCA9IGNvbmZpcm1lZC5zbGljZShjb25maXJtZWQubGVuZ3RoIC0gMzEpDQogICAgICAgICAgICAgICAgbGV0IGRhaWx5RGF0ZXMgPSBkYXRlcy5zbGljZShkYXRlcy5sZW5ndGggLSAzMCkNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBmb3IobGV0IGk9MDsgaTwzMDsgaSsrKXsNCiAgICAgICAgICAgICAgICAgICAgZGFpbHlDb25maXJtZWRbaV0gPSBkYWlseUNvbmZpcm1lZFtpKzFdIC0gZGFpbHlDb25maXJtZWRbaV0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGFpbHlDb25maXJtZWQpDQogICAgICAgICAgICAgICAgdGhpcy5rb3JlYURhaWx5Q2hhcnREYXRhID0gew0KICAgICAgICAgICAgICAgICAgICBsYWJlbHM6IGRhaWx5RGF0ZXMsDQogICAgICAgICAgICAgICAgICAgIGRhdGFzZXRzOlsNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0NvbmZpcm1lZCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6JyMwM2ZjZWMnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjoncmdiYSgzLCAyNTIsIDIzNiwgMC4yKScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRCb3JkZXJDb2xvcjoncmdiYSgyNTUsIDI1NSwgMjU1LCAwKScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZGFpbHlDb25maXJtZWQuc2xpY2UoMCxkYWlseUNvbmZpcm1lZC5sZW5ndGgtMSkNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgXQ0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIHRoaXMua29yZWFUb3RhbCA9IHsNCiAgICAgICAgICAgICAgICAgICAgVG90YWxDb25maXJtZWQgOiB0aGlzLm51bWJlckZvcm1hdChjb25maXJtZWRbY29uZmlybWVkLmxlbmd0aC0xXSksDQogICAgICAgICAgICAgICAgICAgIFRvdGFsRGVhdGhzIDogdGhpcy5udW1iZXJGb3JtYXQoZGVhdGhzW2RlYXRocy5sZW5ndGgtMV0pLA0KICAgICAgICAgICAgICAgICAgICBUb3RhbFJlY292ZXJlZCA6IHRoaXMubnVtYmVyRm9ybWF0KHJlY292ZXJlZFtyZWNvdmVyZWQubGVuZ3RoLTFdKQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB0aGlzLmxvYWRlZCA9IHRydWUNCiAgICAgICAgICAgIH1jYXRjaChlKXsNCiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpDQogICAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgIGFzeW5jIG5hdmVyQ3Jhd2xpbmcoKXsNCiAgICAgICAgICAgIHRyeXsNCiAgICAgICAgICAgICAgICBsZXQgeyBkYXRhIH0gPSBhd2FpdCBheGlvcy5nZXQoJy9jb3ZpZC9uYXZlckNyYXdsaW5nJykNCiAgICAgICAgICAgICAgICB0aGlzLm5hdmVyTmV3cyA9IGRhdGENCiAgICAgICAgICAgIH1jYXRjaChlKXsNCiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpDQogICAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgIGFzeW5jIGdvb2dsZUNyYXdsaW5nKCl7DQogICAgICAgICAgICB0cnl7DQogICAgICAgICAgICAgICAgbGV0IHsgZGF0YSB9ID0gYXdhaXQgYXhpb3MuZ2V0KCcvY292aWQvZ29vZ2xlQ3Jhd2xpbmcnKQ0KICAgICAgICAgICAgICAgIHRoaXMuZ29vZ2xlTmV3cyA9IGRhdGENCiAgICAgICAgICAgIH1jYXRjaChlKXsNCiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpDQogICAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgIGFzeW5jIGNvdmlkR2VuQWdlKCl7DQogICAgICAgICAgICB0cnl7DQogICAgICAgICAgICAgICAgbGV0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCgnL2NvdmlkL2tvcmVhL2dlbkFnZScpDQogICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzKQ0KICAgICAgICAgICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGEucmVzcG9uc2UuYm9keS5pdGVtcy5pdGVtDQogICAgICAgICAgICAgICAgbGV0IGFnZURhdGEgPSBkYXRhLnNsaWNlKDAsIDkpDQogICAgICAgICAgICAgICAgbGV0IGdlbkRhdGEgPSBkYXRhLnNsaWNlKDksIDExKQ0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGxldCBhZ2UgPSBhZ2VEYXRhLm1hcChnZW5BZ2UgPT4gZ2VuQWdlLmd1YnVuKQ0KICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgdGhpcy5rb3JlYUFnZUNoYXJ0RGF0YSA9IHsNCiAgICAgICAgICAgICAgICAgICAgbGFiZWxzIDogYWdlLA0KICAgICAgICAgICAgICAgICAgICBkYXRhc2V0czpbDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICftmZXsp4TsnpAnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOicjMDNmY2VjJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6J3JnYmEoMywgMjUyLCAyMzYsIDAuMiknLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50Qm9yZGVyQ29sb3I6J3JnYmEoMjU1LCAyNTUsIDI1NSwgMCknLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAyLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGFnZURhdGEubWFwKGdlbkFnZSA9PiBnZW5BZ2UuY29uZkNhc2UpDQogICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIF0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB0aGlzLmtvcmVhQ3JpdGljYWxDaGFydERhdGEgPSB7DQogICAgICAgICAgICAgICAgICAgIGxhYmVscyA6IGFnZSwNCiAgICAgICAgICAgICAgICAgICAgZGF0YXNldHM6Ww0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAn7LmY66qF7JyoICjsgqzrp53snpAv7ZmV7KeE7J6QKScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6JyMwM2ZjZWMnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjoncmdiYSgzLCAyNTIsIDIzNiwgMC4yKScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRCb3JkZXJDb2xvcjoncmdiYSgyNTUsIDI1NSwgMjU1LCAwKScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogYWdlRGF0YS5tYXAoZ2VuQWdlID0+IGdlbkFnZS5jcml0aWNhbFJhdGUpDQogICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIF0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB0aGlzLmtvcmVhR2VuQ2hhcnREYXRhID0gew0KICAgICAgICAgICAgICAgICAgICBsYWJlbHMgOiBnZW5EYXRhLm1hcChnZW5BZ2UgPT4gZ2VuQWdlLmd1YnVuKSwNCiAgICAgICAgICAgICAgICAgICAgZGF0YXNldHM6IFsNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ+2ZleynhOyekCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6JyMwM2ZjZWMnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjoncmdiYSgzLCAyNTIsIDIzNiwgMC4yKScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRCb3JkZXJDb2xvcjoncmdiYSgyNTUsIDI1NSwgMjU1LCAwKScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZ2VuRGF0YS5tYXAoZ2VuQWdlID0+IGdlbkFnZS5jb25mQ2FzZSkNCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgIF0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgdGhpcy5nZW5BZ2VDaGFydExvYWRlZCA9IHRydWUNCiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhhZ2UpDQogICAgICAgICAgICB9Y2F0Y2goZSl7DQogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9LA0KICAgICAgICBhc3luYyBjb3ZpZENpdHkoKXsNCiAgICAgICAgICAgIHRyeXsNCiAgICAgICAgICAgICAgICBsZXQgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KCcvY292aWQva29yZWEvY2l0eScpDQogICAgICAgICAgICAgICAgbGV0IGNpdHlEYXRhID0gcmVzLmRhdGEucmVzcG9uc2UuYm9keS5pdGVtcy5pdGVtLnNsaWNlKDAsIDE4KQ0KICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGNpdHlEYXRhKQ0KICAgICAgICAgICAgICAgIHRoaXMua29yZWFDaXR5Q2hhcnREYXRhID0gew0KICAgICAgICAgICAgICAgICAgICBsYWJlbHM6IGNpdHlEYXRhLm1hcChjaXR5ID0+IGNpdHkuZ3VidW4pLA0KICAgICAgICAgICAgICAgICAgICBkYXRhc2V0czpbDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICftmZXsp4TsnpAnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOicjMDNmY2VjJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6J3JnYmEoMywgMjUyLCAyMzYsIDAuMiknLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50Qm9yZGVyQ29sb3I6J3JnYmEoMjU1LCAyNTUsIDI1NSwgMCknLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAyLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGNpdHlEYXRhLm1hcChjaXR5ID0+IGNpdHkuZGVmQ250KQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBdDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHRoaXMuY2l0eUNoYXJ0TG9hZGVkID0gdHJ1ZQ0KDQogICAgICAgICAgICAgICAgZm9yKGxldCBpPTE7IGk8Y2l0eURhdGEubGVuZ3RoOyBpKyspew0KICAgICAgICAgICAgICAgICAgICB0aGlzLmtvcmVhR2VvQ2hhcnREYXRhW2ldLnB1c2goY2l0eURhdGFbaV0uZGVmQ250KQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB0aGlzLmtvcmVhR2VvQ2hhcnRMb2FkZWQgPSB0cnVlDQoNCiAgICAgICAgICAgIH1jYXRjaChlKXsNCiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpDQogICAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgIG51bWJlckZvcm1hdChpbnB1dCl7DQogICAgICAgICAgICByZXR1cm4gaW5wdXQudG9TdHJpbmcoKS5yZXBsYWNlKC9cQig/PShcZHszfSkrKD8hXGQpKS9nLCAiLCIpDQogICAgICAgIH0sDQogICAgICAgIA0KICAgICAgICAgICAgDQogICAgfQ0KfQ0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6NA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA","file":"index.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n    \r\n        <v-container fluid > \r\n            <!-- <v-btn color=\"success\" @click=\"$router.push('/home')\">home</v-btn>\r\n            <v-btn color=\"#2196F3\" @click=\"$router.push('/signup')\">회원가입</v-btn>\r\n            <v-btn color=\"warning\" @click=\"$router.push('/login')\">로그인</v-btn>\r\n            <v-btn @click=\"$router.push('/nav')\">테스트</v-btn>\r\n            <v-btn @click=\"$router.push('/postForm')\">에디터</v-btn>\r\n            <v-btn @click=\"$router.push('/postList')\">게시판</v-btn> -->\r\n            <v-btn @click=\"$router.push('/chartjs')\">뷰차트 테스트</v-btn>\r\n            <v-row>\r\n                <v-col>\r\n\r\n                    <v-card>\r\n                        <v-card-title>\r\n                            <h2><span class=\"title mb-1\">국내</span></h2>\r\n                        </v-card-title>\r\n                        \r\n                        <v-list-item  >\r\n                            \r\n                            <v-list-item-content class=\"justify-center\">\r\n                                <v-card-title >확진</v-card-title>\r\n                                <v-card-text><h2>{{koreaTotal.TotalConfirmed}}</h2></v-card-text>\r\n                            </v-list-item-content >\r\n                            <v-list-item-content class=\"justify-center\">\r\n                                <v-card-title >완치</v-card-title>\r\n                                <v-card-text><h2>{{koreaTotal.TotalRecovered}}</h2></v-card-text>\r\n                                \r\n                            </v-list-item-content >\r\n                            <v-list-item-content class=\"justify-center\">\r\n                                <v-card-title >사망</v-card-title>\r\n                                <v-card-text><h2>{{koreaTotal.TotalDeaths}}</h2></v-card-text>\r\n                                \r\n                            </v-list-item-content >\r\n                        </v-list-item>\r\n                    </v-card>\r\n                </v-col>\r\n                <v-col >\r\n                    <v-card>\r\n                        <v-card-title>\r\n                            <h2><span class=\"title mb-1\">해외</span></h2>\r\n                        </v-card-title>\r\n                        <v-list-item >\r\n                            \r\n                            <v-list-item-content class=\"justify-center\">\r\n                                <v-card-title >확진</v-card-title>\r\n                                <v-card-text><h2>{{worldTotal.TotalConfirmed}}</h2></v-card-text>\r\n                            </v-list-item-content >\r\n                            <v-list-item-content class=\"justify-center\">\r\n                                <v-card-title >완치</v-card-title>\r\n                                <v-card-text><h2>{{worldTotal.TotalRecovered}}</h2></v-card-text>\r\n                                \r\n                            </v-list-item-content >\r\n                            <v-list-item-content class=\"justify-center\">\r\n                                <v-card-title >사망</v-card-title>\r\n                                <v-card-text><h2>{{worldTotal.TotalDeaths}}</h2></v-card-text>\r\n                                \r\n                            </v-list-item-content >\r\n                        </v-list-item>\r\n                    </v-card>\r\n                </v-col>\r\n            </v-row>\r\n            <v-row>\r\n                <v-col >\r\n                    <v-card>\r\n                        <h3>국내 확진자수 증가추이</h3>\r\n                        <v-switch label=\"test\"></v-switch>\r\n                        <line-chart \r\n                        v-if=\"loaded\"\r\n                        :chart-data=\"koreaChartData\">\r\n                        </line-chart>\r\n                    </v-card>\r\n                </v-col>\r\n                <v-col>\r\n                    <v-card>\r\n                        <h3>국내 확진자 일일 신규</h3>\r\n                        <v-switch label=\"test\"></v-switch>\r\n                        <line-chart \r\n                        v-if=\"loaded\"\r\n                        :chart-data=\"koreaDailyChartData\">\r\n                        </line-chart>\r\n                    </v-card>\r\n                </v-col>\r\n            </v-row>\r\n            \r\n            <v-row>\r\n                <v-col cols=\"12\" xs=\"12\" md=\"6\" >\r\n                    <v-card>\r\n                        <v-card-title>\r\n                            <h2><span class=\"title mb-4\">국내 주요 뉴우스</span></h2>\r\n                        </v-card-title>\r\n                        <v-card-text v-for=\"news in naverNews\" :key=\"news\">\r\n                            <h4>\r\n                                <a :href=\"news.href\" style=\"text-decoration:none; color:#2d46c4\" target=\"_blank\">{{news.title}}</a>\r\n                            </h4>\r\n                        </v-card-text>\r\n                        \r\n                    </v-card>\r\n                </v-col>\r\n\r\n                <v-col cols=\"12\" xs=\"12\" md=\"6\" >\r\n                    <v-card>\r\n                        <v-card-title>\r\n                            <h2><span class=\"title mb-4\">해외 주요 뉴우스</span></h2>\r\n                        </v-card-title>\r\n                        <v-card-text v-for=\"news in googleNews\" :key=\"news\">\r\n                            <h4>\r\n                                <a :href=\"news.href\" style=\"text-decoration:none; color:#2d46c4\" target=\"_blank\">{{news.title}}</a>\r\n                            </h4>\r\n                        </v-card-text>\r\n                        \r\n                    </v-card>\r\n                </v-col>\r\n            </v-row>\r\n            <v-row>\r\n                <v-col>\r\n                    <v-card>\r\n                        <h3>연령대별 확진자 현황</h3>\r\n                        <bar-chart\r\n                        :chart-data=\"koreaAgeChartData\"\r\n                        v-if=\"genAgeChartLoaded\">\r\n                        </bar-chart>\r\n                    </v-card>\r\n                    <v-card>\r\n                        <h3>연령대별 치명율 현황</h3>\r\n                        <bar-chart\r\n                        :chart-data=\"koreaCriticalChartData\"\r\n                        v-if=\"genAgeChartLoaded\">\r\n                        </bar-chart>\r\n                    </v-card>\r\n                </v-col>\r\n            </v-row>\r\n            \r\n            <v-row>\r\n                <v-col>\r\n                    <v-card>\r\n                        <h3>성별 확진자 현황</h3>\r\n                        <bar-chart\r\n                        :chart-data=\"koreaGenChartData\"\r\n                        v-if=\"genAgeChartLoaded\">\r\n                        </bar-chart>\r\n                    </v-card>\r\n                    <v-card>\r\n                        <h3>도시별 확진자 현황</h3>\r\n                        <bar-chart\r\n                        :chart-data=\"koreaCityChartData\"\r\n                        v-if=\"cityChartLoaded\">\r\n                        </bar-chart>\r\n                    </v-card>\r\n                </v-col>\r\n            </v-row>\r\n            <v-row>\r\n                <v-col cols=\"12\"  md=\"8\" lg=\"9\">\r\n                    <v-card >\r\n                        <GChart\r\n                            type=\"GeoChart\"\r\n                            :settings=\"{ packages: [ 'geochart'], mapsApiKey : 'AIzaSyDXlL3m7Q99D4ZDHEDntQ5b_uj30bzduqY' }\"\r\n                            :data=\"koreaGeoChartData\"\r\n                            :options=\"koreaGeoChartOptions\"\r\n                            v-if=\"koreaGeoChartLoaded\"\r\n                        />\r\n                    </v-card>\r\n                </v-col>\r\n                <v-col cols=\"12\" md=\"4\" lg=\"3\">\r\n                    <v-card >\r\n                        <v-carousel\r\n                            cycle\r\n                            \r\n                            hide-delimiter-background\r\n                            show-arrows-on-hover\r\n                            height=\"auto\"\r\n                        >\r\n                            <v-carousel-item\r\n                            v-for=\"slide in slides\"\r\n                            :key=\"slide\"\r\n                            \r\n                        \r\n                            >\r\n                           \r\n                            <v-img :src=\"slide.src\" contain />\r\n                               \r\n                            </v-carousel-item>\r\n                        </v-carousel>\r\n                    </v-card>\r\n                </v-col>\r\n                \r\n            </v-row>\r\n            <v-row>\r\n                <v-col cols=\"12\" >\r\n                    <v-card>\r\n                        <h3>전세계 증가추이</h3>\r\n                        <line-chart\r\n                        :chart-data=\"worldChartData\"\r\n                        v-if=\"worldChartLoaded\">\r\n                        </line-chart>\r\n                    </v-card>\r\n                </v-col>\r\n                <v-col>\r\n                    <v-card>\r\n                       \r\n                    </v-card>\r\n                </v-col>\r\n            </v-row>\r\n            <v-row>\r\n                <v-col>\r\n                    <v-card>\r\n                        <GChart\r\n                            type=\"GeoChart\"\r\n                            :settings=\"{ packages: [ 'geochart'], mapsApiKey : 'AIzaSyDXlL3m7Q99D4ZDHEDntQ5b_uj30bzduqY' }\"\r\n                            :data=\"worldGeoChartData\"\r\n                            :options=\"worldGeoChartOptions\"\r\n                            v-if=\"koreaGeoChartLoaded\"\r\n                        />\r\n                    </v-card>\r\n                </v-col>\r\n            </v-row>\r\n        </v-container>\r\n        \r\n</template>\r\n\r\n<script>\r\nimport LineChart from '@/components/LineChart'\r\nimport BarChart from '@/components/BarChart'\r\nimport { GChart } from 'vue-google-charts'\r\n\r\n\r\nexport default {\r\n    components:{\r\n        LineChart,\r\n        BarChart,\r\n        GChart,\r\n    },\r\n    data(){\r\n        return {\r\n            worldTotal:{},\r\n            koreaTotal:{},\r\n            koreaTotalChartData: null,\r\n            koreaDailyChartData:null,\r\n            koreaGenChartData:null,\r\n            koreaAgeChartData:null,\r\n            koreaCriticalChartData:null,\r\n            koreaCityChartData:null,\r\n            worldChartData:null,\r\n            loaded:false,\r\n            naverNews:'',\r\n            googleNews:'',\r\n            genAgeChartLoaded:false,\r\n            cityChartLoaded:false,\r\n            worldChartLoaded:false,\r\n            koreaGeoChartLoaded:false,\r\n\r\n            koreaGeoChartData: [\r\n               \r\n                ['City', '확진'],\r\n                [{v:'KR-49',f:'제주'}],\r\n                [{v:'KR-48',f:'경남'}],\r\n                [{v:'KR-47',f:'경북'}],\r\n                [{v:'KR-46',f:'전남'}],\r\n                [{v:'KR-45',f:'전북'}],\r\n                [{v:'KR-44',f:'충남'}],\r\n                [{v:'KR-43',f:'충북'}],\r\n                [{v:'KR-42',f:'강원'}],\r\n                [{v:'KR-41',f:'경기'}],\r\n                [{v:'KR-50',f:'세종'}],\r\n                [{v:'KR-31',f:'울산'}],\r\n                [{v:'KR-30',f:'대전'}],\r\n                [{v:'KR-29',f:'광주'}],\r\n                [{v:'KR-28',f:'인천'}],\r\n                [{v:'KR-27',f:'대구'}],\r\n                [{v:'KR-26',f:'부산'}],\r\n                [{v:'KR-11',f:'서울'}],\r\n                \r\n            ],\r\n            koreaGeoChartOptions: {\r\n                region: 'KR',\r\n                resolution: 'provinces',\r\n                colorAxis:{\r\n                    minValue: 0,  colors: ['#ffffff', '#f00a0a']\r\n                }\r\n            },\r\n\r\n            worldGeoChartData:[['Country', '확진']],\r\n\r\n\r\n            worldGeoChartOptions:{\r\n                resolution: 'countries',\r\n                colorAxis:{\r\n                    minValue: 0,  colors: ['#ffffff', '#f00a0a']\r\n                }\r\n            },\r\n            slides:[\r\n                {\r\n                    src: 'images/corona-1.jpg'\r\n                },\r\n                {\r\n                    src: 'images/corona-2.jpg'\r\n                },\r\n                {\r\n                    src: 'images/corona-3.jpg'\r\n                },\r\n                {\r\n                    src: 'images/corona-4.jpg'\r\n                },\r\n                \r\n            ]\r\n\r\n            \r\n        }\r\n    },\r\n    created(){\r\n        this.getWorldTotal()\r\n        this.getKoreaTotal()\r\n        this.googleCrawling()\r\n        \r\n        this.naverCrawling()\r\n        this.covidGenAge();\r\n        this.covidCity();\r\n\r\n        this.getCountryTotal()\r\n       \r\n    },\r\n    methods:{\r\n        // getWorldTotal(){\r\n        //     axios.get('https://api.covid19api.com/world/total')\r\n        //     .then(({data})=>{\r\n        //         this.worldTotal = {\r\n        //             TotalConfirmed : this.numberFormat(data.TotalConfirmed),\r\n        //             TotalDeaths : this.numberFormat(data.TotalDeaths),\r\n        //             TotalRecovered : this.numberFormat(data.TotalRecovered)\r\n        //         }\r\n        //     })\r\n        //     .catch(err=>{\r\n        //         console.error(err)\r\n        //     })\r\n        // },\r\n        async getWorldTotal(){\r\n            try{\r\n                let { data } = await axios.get('/covid/world/daily')\r\n                console.log(data)\r\n                this.worldChartData  = {\r\n                    labels : data.map(covid => covid.reportDate.substring(5)),\r\n                    datasets:[\r\n                        {\r\n                            label: 'Confirmed',\r\n                            borderColor:'#03fcec',\r\n                            backgroundColor:'rgba(3, 252, 236, 0.2)',\r\n                            pointBorderColor:'rgba(255, 255, 255, 0)',\r\n                            borderWidth: 2,\r\n                            data: data.map(covid => covid.confirmed.total)\r\n                        },\r\n                        {\r\n                            label: 'Deaths',\r\n                            borderColor:'#c70808',\r\n                            backgroundColor:'rgba(199, 8, 8, 0.7)',\r\n                            pointBorderColor:'rgba(255, 255, 255, 0)',\r\n                            borderWidth: 2,\r\n                            data: data.map(covid => covid.deaths.total)\r\n                        }\r\n                    ]\r\n                }\r\n                this.worldChartLoaded = true\r\n            }catch(e){\r\n                console.error(e)\r\n            }\r\n        },\r\n        async getCountryTotal(){\r\n            try{\r\n                let { data } = await axios.get('/covid/world/confirmed')\r\n                console.log(data)\r\n                data.forEach(covid => {\r\n                    this.worldGeoChartData.push([covid.countryRegion, covid.confirmed])\r\n                })\r\n                \r\n            }catch(e){\r\n                console.error(e)\r\n            }\r\n        },\r\n        async getKoreaTotal(){\r\n            try{\r\n                let { data } = await axios.get('https://api.covid19api.com/total/country/south-korea')\r\n                console.log(data)\r\n                let dates = data.map(covid => covid.Date.substring(5,10))\r\n                let confirmed = data.map(covid => covid.Confirmed)\r\n                let recovered = data.map(covid => covid.Recovered)\r\n                let deaths = data.map(covid => covid.Deaths)\r\n                this.koreaChartData = {\r\n                    labels: dates,\r\n                    datasets:[\r\n                        {\r\n                            label: 'Confirmed',\r\n                            borderColor:'#03fcec',\r\n                            backgroundColor:'rgba(3, 252, 236, 0.2)',\r\n                            pointBorderColor:'rgba(255, 255, 255, 0)',\r\n                            borderWidth: 2,\r\n                            data: confirmed\r\n                        },\r\n                        {\r\n                            label: 'Recovered',\r\n                            borderColor:'#0ecf4b',                     \r\n                            backgroundColor:'rgba(14, 207, 75, 0.2)',\r\n                            pointBorderColor:'rgba(255, 255, 255, 0)',\r\n                            borderWidth: 2,\r\n                            data: recovered\r\n                        },\r\n                        \r\n                        {\r\n                            label: 'Deaths',\r\n                            borderColor:'#c70808',\r\n                            backgroundColor:'rgba(199, 8, 8, 0.7)',\r\n                            pointBorderColor:'rgba(255, 255, 255, 0)',\r\n                            borderWidth: 2,\r\n                            data: deaths\r\n                        },\r\n                        \r\n                    ]\r\n                }\r\n                \r\n                let dailyConfirmed = confirmed.slice(confirmed.length - 31)\r\n                let dailyDates = dates.slice(dates.length - 30)\r\n                \r\n                for(let i=0; i<30; i++){\r\n                    dailyConfirmed[i] = dailyConfirmed[i+1] - dailyConfirmed[i]\r\n                }\r\n                console.log(dailyConfirmed)\r\n                this.koreaDailyChartData = {\r\n                    labels: dailyDates,\r\n                    datasets:[\r\n                        {\r\n                            label: 'Confirmed',\r\n                            borderColor:'#03fcec',\r\n                            backgroundColor:'rgba(3, 252, 236, 0.2)',\r\n                            pointBorderColor:'rgba(255, 255, 255, 0)',\r\n                            borderWidth: 2,\r\n                            data: dailyConfirmed.slice(0,dailyConfirmed.length-1)\r\n                        }\r\n                    ]\r\n                }\r\n\r\n                this.koreaTotal = {\r\n                    TotalConfirmed : this.numberFormat(confirmed[confirmed.length-1]),\r\n                    TotalDeaths : this.numberFormat(deaths[deaths.length-1]),\r\n                    TotalRecovered : this.numberFormat(recovered[recovered.length-1])\r\n                }\r\n                this.loaded = true\r\n            }catch(e){\r\n                console.error(e)\r\n            }\r\n        },\r\n        async naverCrawling(){\r\n            try{\r\n                let { data } = await axios.get('/covid/naverCrawling')\r\n                this.naverNews = data\r\n            }catch(e){\r\n                console.error(e)\r\n            }\r\n        },\r\n        async googleCrawling(){\r\n            try{\r\n                let { data } = await axios.get('/covid/googleCrawling')\r\n                this.googleNews = data\r\n            }catch(e){\r\n                console.error(e)\r\n            }\r\n        },\r\n        async covidGenAge(){\r\n            try{\r\n                let res = await axios.get('/covid/korea/genAge')\r\n                console.log(res)\r\n                let data = res.data.response.body.items.item\r\n                let ageData = data.slice(0, 9)\r\n                let genData = data.slice(9, 11)\r\n                \r\n                let age = ageData.map(genAge => genAge.gubun)\r\n               \r\n                this.koreaAgeChartData = {\r\n                    labels : age,\r\n                    datasets:[\r\n                        {\r\n                            label: '확진자',\r\n                            borderColor:'#03fcec',\r\n                            backgroundColor:'rgba(3, 252, 236, 0.2)',\r\n                            pointBorderColor:'rgba(255, 255, 255, 0)',\r\n                            borderWidth: 2,\r\n                            data: ageData.map(genAge => genAge.confCase)\r\n                        },\r\n                        \r\n                    ]\r\n                }\r\n\r\n                this.koreaCriticalChartData = {\r\n                    labels : age,\r\n                    datasets:[\r\n                        {\r\n                            label: '치명율 (사망자/확진자)',\r\n                            borderColor:'#03fcec',\r\n                            backgroundColor:'rgba(3, 252, 236, 0.2)',\r\n                            pointBorderColor:'rgba(255, 255, 255, 0)',\r\n                            borderWidth: 2,\r\n                            data: ageData.map(genAge => genAge.criticalRate)\r\n                        },\r\n                        \r\n                    ]\r\n                }\r\n\r\n                this.koreaGenChartData = {\r\n                    labels : genData.map(genAge => genAge.gubun),\r\n                    datasets: [\r\n                        {\r\n                            label: '확진자',\r\n                            borderColor:'#03fcec',\r\n                            backgroundColor:'rgba(3, 252, 236, 0.2)',\r\n                            pointBorderColor:'rgba(255, 255, 255, 0)',\r\n                            borderWidth: 2,\r\n                            data: genData.map(genAge => genAge.confCase)\r\n                        },\r\n                    ]\r\n                }\r\n                this.genAgeChartLoaded = true\r\n                console.log(age)\r\n            }catch(e){\r\n                console.error(e)\r\n            }\r\n        },\r\n        async covidCity(){\r\n            try{\r\n                let res = await axios.get('/covid/korea/city')\r\n                let cityData = res.data.response.body.items.item.slice(0, 18)\r\n                console.log(cityData)\r\n                this.koreaCityChartData = {\r\n                    labels: cityData.map(city => city.gubun),\r\n                    datasets:[\r\n                        {\r\n                            label: '확진자',\r\n                            borderColor:'#03fcec',\r\n                            backgroundColor:'rgba(3, 252, 236, 0.2)',\r\n                            pointBorderColor:'rgba(255, 255, 255, 0)',\r\n                            borderWidth: 2,\r\n                            data: cityData.map(city => city.defCnt)\r\n                        }\r\n                    ]\r\n                }\r\n                this.cityChartLoaded = true\r\n\r\n                for(let i=1; i<cityData.length; i++){\r\n                    this.koreaGeoChartData[i].push(cityData[i].defCnt)\r\n                }\r\n                this.koreaGeoChartLoaded = true\r\n\r\n            }catch(e){\r\n                console.error(e)\r\n            }\r\n        },\r\n        numberFormat(input){\r\n            return input.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n        },\r\n        \r\n            \r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"]}]}